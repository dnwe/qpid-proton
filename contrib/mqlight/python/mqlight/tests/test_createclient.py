import unittest
import re
import inspect
from mock import Mock
from mqlight import *

class TestCreateClient(unittest.TestCase):
        
    def test_golden_path(self):
        """
        Test the folden path through using a client
        """
        id = 'test'
        service = 'amqp://host:1234'
        client = create_client(service, id)
        self.assertEqual(client.get_state(), DISCONNECTED)
        self.assertEqual(client.get_id(), id)
        self.assertEqual(client.get_service(), None)
        connect_callback = Mock()        
        def connected(value):
            self.assertEqual(value, (True,))
            self.assertEqual(client.get_state(), CONNECTED)
            self.assertEqual(client.get_service(), service)
            client.disconnect()
        client.on(CONNECTED, connected)
        client.connect(connect_callback)
        connect_callback.assert_called_with(None)

    def test_service_not_a_string(self):
        """
        Test that a service name must be a string
        """
        with self.assertRaises(ValueError) as cm:
            client = create_client(1234)
        self.assertEqual(str(cm.exception), 'service must be a string or array type')

    def test_create_client_must_have_a_value(self):
        """
        Test that passing no value to create_client is not valid
        """    
        with self.assertRaises(TypeError):
            client = create_client()

    def test_id_types_values(self):
        """
        Test a range of types / values for client IDs
        """
        data = [
            { 'data': 1234, 'valid': True },
            { 'data': None, 'valid': True },
            { 'data': True, 'valid': True },
            { 'data': 'abc1234', 'valid': True },
            { 'data': ':1234', 'valid': False },
            { 'data': '1234:', 'valid': False },
            { 'data': '12:34', 'valid': False },
            { 'data': '%./_', 'valid': True },
            { 'data': '&.\_', 'valid': False }]
        for i in data:
            try:
                create_client('amqp://localhost:5672', i['data'])
                self.assertTrue(i['valid'])
            except Exception as e:
                print e
                self.assertFalse(i['valid'])


    def test_id_autogenerated(self):
        """
        Test that if the 'id' property is omitted then the client id will be generated
        """
        client = create_client('amqp://localhost:5672')
        self.assertNotEqual(None, re.search(r'^AUTO_[a-z0-9%/._]{7}$', client.get_id()))

    def test_user_password_types_values(self):
        """
        Test a range of user and password types / values
        """
        data = [
            {'user': 'abc', 'password': None, 'valid': False },
            {'user': None, 'password': 'abc', 'valid': False },
            {'user': 'abc', 'password': '123', 'valid': True },
            {'user': 1234, 'password': 'abc', 'valid': True },
            {'user': 'abc', 'password': 1234, 'valid': True },
            {'user': '!"$%^&*()-_=+[{]};:\'@#~|\<,>.?/', 'password': '!"$%^&*()-_=+[{]};:\'@#~|\<,>.?/', 'valid': True }]
        for i in data:
            try:
                create_client('amqp://localhost:5672', 'id', i['user'], i['password'])
                self.assertTrue(i['valid'])
            except Exception as e:
                print e
                self.assertFalse(i['valid'])

    def test_password_hidden(self):
        """
        Test that a clear text password isn;t trivially recovewrable from te client object
        """
        client = create_client('amqp://localhost:5672', 'id', 'username', 's3cret')
        self.assertEqual(None, re.search(r's3cret', str(inspect.getmembers(client, lambda a:not(inspect.isroutine(a))))))

    def test_valid_uris(self):
        """
        Test that the value returned by client.get_service is a lower cased URL which always has a port number
        """
        data = [
            { 'uri': 'amqp://host', 'expected': 'amqp://host:5672' },
            { 'uri': 'amqps://host', 'expected': 'amqps://host:5671' },
            { 'uri': 'AmQp://HoSt', 'expected': 'amqp://host:5672' },
            { 'uri': 'aMqPs://hOsT', 'expected': 'amqps://host:5671' },
            { 'uri': 'amqp://host:1234', 'expected': 'amqp://host:1234' },
            { 'uri': 'amqps://host:4321', 'expected': 'amqps://host:4321' },
            { 'uri': 'aMqP://HoSt:1234', 'expected': 'amqp://host:1234' },
            { 'uri': 'AmQpS://hOsT:4321', 'expected': 'amqps://host:4321' }];
        count = 0
        for i in data:
            count = count + 1
            client = create_client(i['uri'])
            def connected(err):
                self.assertEqual(client.get_service(), i['expected'])
                client.disconnect()
            client.connect(connected)
        self.assertEqual(count, len(data))
      
if __name__ == 'main':
    unittest.main()

        
