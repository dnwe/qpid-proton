<!--
 *   <copyright
 *   notice="oco-source"
 *   pids="5725-P60"
 *   years="2015"
 *   crc="1438874957" >
 *   IBM Confidential
 *
 *   OCO Source Materials
 *
 *   5724-H72
 *
 *   (C) Copyright IBM Corp. 2015
 *
 *   The source code for the program is not published
 *   or otherwise divested of its trade secrets,
 *   irrespective of what has been deposited with the
 *   U.S. Copyright Office.
 *   </copyright>
-->

<project name="mqlight" default="all" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<property environment="env"/>
	<property name="src" location="mqlight/src/main/java"/>
	<property name="lib" location="lib"/>
	<property name="nonship" location="nonship"/>
	<property name="unittest.src" location="mqlight/src/test/java"/>

	<!-- Taskdef for the Jacoco code coverage tool -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${nonship}/jacocoant.jar"/>
	</taskdef>
	
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath path="${nonship}/findbugs-2.0.1/lib/findbugs-ant.jar"/>
	</taskdef>
	
	<!-- If the 'BROOT' environment variable is set - generate output relative to BROOT -->
	<target name="broot.present" if="env.BROOT">
		<echo message="Running inside MQ Build environment"/>
		<property name="output.root" location="${env.BROOT}/appmsging/java"/>
		<property name="protonSource" value="${env.BROOT}/appmsging/qpid-proton/qpid-proton-0.8/proton-j/src"/>
		<exec executable="mqvrmf" outputproperty="version">
			<arg value="-J"/>
		</exec>
		<property name="level" value="${env.LEVEL}" />
	</target>

	<!-- If the 'broot' environment variable is not set - generate output relative to -->
	<!-- the location that Ant is being run from.                                     -->
	<target name="broot.missing" unless="env.BROOT">
		<echo message="Running outside MQ Build environment"/>
		<property name="output.root" location="output"/>
		<property name="protonSource" value="../../ApacheQpid/qpid-proton-0.8/proton-j/src" />
		<property name="version" value="1.0-SNAPSHOT"/>	<!-- TODO: is this right?  Should we store this somewher else? -->
		<!-- Calculate the date part of the build level -->
		<tstamp>
			<format property="build.date" pattern="yyMMdd.kk" />
		</tstamp>
		<!-- Choose the level name for this build -->
		<property name="level" value="developer_localbuild-L${build.date}" />
	</target>

	<target name="setup" depends="broot.present, broot.missing">
		<echo message="Output going to: ${output.root}"/>
		<property name="ship" location="${output.root}/ship"/>
		<property name="doc" location="${output.root}/doc"/>
		<property name="unittest" location="${output.root}/unittest"/>
		<property name="unittest.classes" location="${unittest}/classes"/>
		<property name="unittest.coverage" location="${unittest}/coverage"/>
		<property name="unittest.output" location="${unittest}/output"/>
		<property name="classes" location="${output.root}/classes"/>
	</target>

	<target name="clean" depends="setup">
		<delete dir="${classes}"/>
		<delete dir="${ship}"/>
		<delete dir="${doc}"/>
		<delete dir="${unittest}"/>
	</target>

	<target name="mkdirs" depends="setup">
		<mkdir dir="${classes}"/>
		<mkdir dir="${ship}"/>
		<mkdir dir="${ship}/mqlight-${version}"/>
		<mkdir dir="${doc}"/>
		<mkdir dir="${unittest.classes}"/>
		<mkdir dir="${unittest.coverage}"/>
		<mkdir dir="${unittest.output}"/>
	</target>

	<target name="compile" depends="mkdirs">
		<javac srcdir="${src}" destdir="${classes}" includeantruntime="false" debug="true">
			<src path="${protonSource}/main/java" />
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
			</classpath>
		</javac>
		<delete><fileset dir="${classes}" includes="**/doc-files/*"/></delete>
	</target>

	<target name="javadoc" depends="compile">
		<javadoc destdir="${doc}">
			<packageset dir="${src}" defaultexcludes="yes">
				<include name="com/ibm/mqlight/api/**"/>
				<exclude name="com/ibm/mqlight/api/impl/**"/>
			</packageset>
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
				<pathelement path="${classes}"/>
			</classpath>
		</javadoc>
	</target>

	<target name="check.licenses">
		<available file="${env.BROOT}/ship/opt/mqm/license/early-access/license" property="licenses.present"/>
	</target>

	<target name="copy.licenses" depends="check.licenses" if="licenses.present">
		<mkdir dir="${ship}/mqlight-${version}/license"/>
		<copy todir="${ship}/mqlight-${version}/license">
			<fileset dir="${env.BROOT}/ship/opt/mqm/license/early-access/license">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>

	<target name="package" depends="compile, javadoc, copy.licenses">
		<copy todir="${ship}/mqlight-${version}" file="mqlight/pom.xml"/>
		<replace file="${ship}/mqlight-${version}/pom.xml" token="9.9.9999999999" value="${version}"/>
		<jar jarfile="${ship}/mqlight-${version}/mqlight-api-${version}.jar" basedir="${classes}">
			<manifest>
				<attribute name="Implementation-Version" value="${level}"/>
			</manifest>
		</jar>
		<jar jarfile="${ship}/mqlight-${version}/mqlight-api-${version}-javadoc.jar" basedir="${doc}">
			<manifest>
				<attribute name="Implementation-Version" value="${level}"/>
			</manifest>
		</jar>
		<zip destfile="${ship}/mqlight-api-${version}-all.zip">
			<zipfileset dir="${ship}/mqlight-${version}" prefix="mqlight-${version}"/>
		</zip>
	</target>

	<target name="compile.ut" depends="package">
		<javac srcdir="${unittest.src}" destdir="${unittest.classes}" includeantruntime="false" debug="true">
			<classpath>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${nonship}">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${ship}/mqlight-${version}/">
					<include name="mqlight-api-${version}.jar"/>
				</fileset>
			</classpath>
		</javac>
		<jar jarfile="${unittest}/mqlight-api-${version}-unittests.jar" basedir="${classes}"/>
	</target>

	<target name="check.ut">
		<available file="${unittest}/mqlight-api-${version}-unittests.jar" property="unittests.present"/>
	</target>

	<target name="execute.ut.tests" depends="setup, check.ut" if="unittests.present">
		<delete file="${unittest}/tests.failed"/>
		<delete file="${unittest}/coverage.failed"/>

		<jacoco:coverage destfile="${unittest.coverage}/jacoco.exec" excludes="org.*:com.ibm.mqlight.api.samples.*">
			<junit failureproperty="junit.failed" fork="true" forkmode="once">
				<formatter type="plain" usefile="true"/>
				<formatter type="xml" usefile="true"/>
				<classpath>
					<fileset dir="${lib}">
						<include name="**/*.jar"/>
					</fileset>
					<fileset dir="${nonship}">
						<include name="*.jar"/>
					</fileset>
					<fileset dir="${ship}/mqlight-${version}">
						<include name="mqlight-api-${version}.jar"/>
					</fileset>
					<pathelement path="${unittest.classes}"/>
				</classpath>
				<batchtest todir="${unittest.output}">
					<fileset dir="${unittest.src}">
						<include name="**/Test*.java"/>
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>

		<junitreport todir="${unittest}" tofile="junit.xml">
			<fileset dir="${unittest.output}">
				<include name="TEST-*.xml"/>
			</fileset>
		</junitreport>

		<concat destfile="${unittest}/javatest.log" append="true">
			<fileset dir="${unittest.output}" includes="TEST-*.txt"/>
		</concat>
		
		<jacoco:report>
			<executiondata>
				<file file="${unittest.coverage}/jacoco.exec"/>
			</executiondata>

		    <structure name="MQ Light Non-blocking Java Client">
		        <classfiles>
		            <fileset dir="${classes}">
		        	    <exclude name="org/**/*"/>
		        		<exclude name="com/ibm/mqlight/api/samples/**/*"/>
		            </fileset>
		        </classfiles>
		        <sourcefiles encoding="UTF-8">
		            <fileset dir="${src}"/>
		        </sourcefiles>
		    </structure>
		                        
		    <html destdir="${unittest.coverage}"/>
			<html destfile="${unittest.coverage}/java-utcoverage.zip"/>
			<check failonviolation="false" violationsproperty="coverage.failed">
				<rule>
					<!-- Require at least 80% instruction coverage from the unit tests -->
					<limit counter="INSTRUCTION" value="COVEREDRATIO" minimum="0.5"/>  <!-- TODO: set the bar higher, we agreed >= 0.8! -->
				</rule>
			</check>
		</jacoco:report>
	</target>

	<target name="findbugs" depends="package">
		<findbugs home="${nonship}/findbugs-2.0.1"
				  output="html"
				  outputFile="${unittest}/javafindbugs.html"
				  excludeFilter="findbugs.excludes.xml"
				  errorProperty="findbugs.failed"
				  warningsProperty="findbugs.failed">
			<auxClasspath>
				<fileset dir="${ship}/mqlight-${version}">
					<include name="mqlight-api-${version}.jar"/>
				</fileset>
				<fileset dir="${lib}">
					<include name="**/*.jar"/>
				</fileset>
			</auxClasspath>
			<sourcePath path="${src}" />
			<fileset dir="${classes}">
				<include name="com/ibm/mqlight/**/*.class"/>
			</fileset>
		</findbugs>
	</target>

	<target name="ut.status" depends="execute.ut.tests" if="junit.failed">
		<touch file="${unittest}/tests.failed"/>
	</target>
	
	<target name="coverage.status" depends="execute.ut.tests" if="coverage.failed">
		<touch file="${unittest}/coverage.failed"/>
	</target>

	<target name="findbugs.status" depends="findbugs" if="findbugs.failed">
		<touch file="${unittest}/findbugs.failed"/>
	</target>

	<target name="run.ut" depends="ut.status, coverage.status, findbugs.status"/>
	
	<target name="unittest" depends="compile.ut, ut.status, coverage.status">
		<fail if="junit.failed" message="Junit tests failed"/>
		<fail if="coverage.failed" message="Unit test cover coverage below required threashold"/>
	</target>

	<target name="mqlight" depends="package, compile.ut"/>

	<target name="all" depends="clean, unittest"/>
</project>
