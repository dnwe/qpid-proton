<!--

    Licensed to the Apache Software Foundation (ASF) under one
    or more contributor license agreements.  See the NOTICE file
    distributed with this work for additional information
    regarding copyright ownership.  The ASF licenses this file
    to you under the Apache License, Version 2.0 (the
    "License"); you may not use this file except in compliance
    with the License.  You may obtain a copy of the License at

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<project name="mqlight" default="all" basedir="." xmlns:jacoco="antlib:org.jacoco.ant">
	<property environment="env"/>
	<property name="product.src" location="mqlight/src/main/java"/>
	<property name="samples.src" location="mqlight-samples/src/main/java/"/>
	<property name="lib" location="lib"/>
	<property name="nonship" location="nonship"/>
	<property name="product.unittest.src" location="mqlight/src/test/java"/>
	<property name="samples.unittest.src" location="mqlight-samples/src/test/java"/>

	<!-- Define commonly used paths -->
	<path id="lib.jars">
		<fileset dir="${lib}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<!-- Taskdef for the Jacoco code coverage tool -->
	<taskdef uri="antlib:org.jacoco.ant" resource="org/jacoco/ant/antlib.xml">
		<classpath path="${nonship}/jacocoant.jar"/>
	</taskdef>
	
	<taskdef name="findbugs" classname="edu.umd.cs.findbugs.anttask.FindBugsTask">
		<classpath path="../../MakeSystem/tools/findbugs/lib/findbugs-ant.jar"/>
	</taskdef>
	
	<!-- If the 'BROOT' environment variable is set - generate output relative to BROOT -->
	<target name="broot.present" if="env.BROOT">
		<echo message="Running inside MQ Build environment"/>
		<property name="output.root" location="${env.BROOT}/appmsging/java"/>
		<property name="protonSource" value="${env.BROOT}/appmsging/qpid-proton/qpid-proton-0.8/proton-j/src"/>
		<exec executable="mqvrmf" outputproperty="version">
			<arg value="-J"/>
		</exec>
		<property name="level" value="${env.LEVEL}" />
	</target>

	<!-- If the 'broot' environment variable is not set - generate output relative to -->
	<!-- the location that Ant is being run from.                                     -->
	<target name="broot.missing" unless="env.BROOT">
		<echo message="Running outside MQ Build environment"/>
		<property name="output.root" location="output"/>
		<property name="protonSource" value="../../ApacheQpid/qpid-proton-0.8/proton-j/src" />
		<property name="version" value="1.0-SNAPSHOT"/>	<!-- TODO: is this right?  Should we store this somewher else? -->
		<!-- Calculate the date part of the build level -->
		<tstamp>
			<format property="build.date" pattern="yyMMdd.kk" />
		</tstamp>
		<!-- Choose the level name for this build -->
		<property name="level" value="developer_localbuild-L${build.date}" />
	</target>

	<target name="setup" depends="broot.present, broot.missing">
		<echo message="Output going to: ${output.root}"/>
		<property name="ship" location="${output.root}/ship"/>
		<property name="results" location="${output.root}/test-results"/>
		<property name="product.doc" location="${output.root}/mqlight/doc"/>
		<property name="product.unittest" location="${output.root}/mqlight/unittest"/>
		<property name="product.unittest.classes" location="${product.unittest}/classes"/>
		<property name="product.classes" location="${output.root}/mqlight/classes"/>
		
		<property name="samples.doc" location="${output.root}/mqlight-samples/doc"/>
		
		<property name="samples.unittest" location="${output.root}/mqlight-samples/unittest"/>
		<property name="samples.unittest.classes" location="${samples.unittest}/classes"/>
		<property name="samples.classes" location="${output.root}/mqlight-samples/classes"/>
		
		<property name="results.unittest.coverage" location="${results}/coverage"/>
		<property name="results.unittest.output" location="${results}/output"/>
		
		<!-- Check whether there are any license files available in the build tree -->
		<available file="${env.BROOT}/ship/opt/mqm/license/early-access/license" property="licenses.present"/>
	</target>

	<target name="clean" depends="setup">
		<delete dir="${output.root}"/>
	</target>

	<target name="mkdirs" depends="setup">
		<mkdir dir="${product.classes}"/>
		<mkdir dir="${samples.classes}"/>
		<mkdir dir="${ship}"/>
		<mkdir dir="${ship}/mqlight-${version}"/>
		<mkdir dir="${product.doc}"/>
		<mkdir dir="${product.unittest.classes}"/>
		<mkdir dir="${results.unittest.coverage}"/>
		<mkdir dir="${results.unittest.output}"/>
		<mkdir dir="${samples.unittest.classes}"/>
	</target>

	<!-- Compile the product files -->
	<target name="product.compile" depends="mkdirs">
		<javac srcdir="${product.src}" destdir="${product.classes}" includeantruntime="false" debug="true">
			<src path="${protonSource}/main/java" />
			<classpath refid="lib.jars"/>
		</javac>
		<delete><fileset dir="${product.classes}" includes="**/doc-files/*"/></delete>
	</target>

	<!-- Compile the sample files -->
	<target name="samples.compile" depends="mkdirs, product.compile">
		<javac srcdir="${samples.src}" destdir="${samples.classes}" includeantruntime="false" debug="true">
			<classpath>
				<pathelement path="${product.classes}"/>
				<path refid="lib.jars"/>
			</classpath>
		</javac>
	</target>

	<!-- Generate Javadoc for product and samples -->
	<target name="javadoc" depends="product.compile, samples.compile">
		<javadoc destdir="${product.doc}">
			<packageset dir="${product.src}" defaultexcludes="yes">
				<include name="com/ibm/mqlight/api/**"/>
				<exclude name="com/ibm/mqlight/api/impl/**"/>
			</packageset>
			<classpath>
				<path refid="lib.jars"/>
				<pathelement path="${product.classes}"/>
			</classpath>
		</javadoc>
		
		<javadoc destdir="${samples.doc}">
			<packageset dir="${samples.src}" defaultexcludes="yes">
				<include name="com/ibm/mqlight/api/**"/>
				<exclude name="com/ibm/mqlight/api/impl/**"/>
			</packageset>
			<classpath>
				<path refid="lib.jars"/>
				<pathelement path="${product.classes}"/>
				<pathelement path="${samples.classes}"/>
			</classpath>
		</javadoc>
	</target>

	<target name="copy.licenses" depends="setup" if="licenses.present">
		<mkdir dir="${ship}/mqlight-${version}/license"/>
		<copy todir="${ship}/mqlight-${version}/license">
			<fileset dir="${env.BROOT}/ship/opt/mqm/license/early-access/license">
				<include name="**/*"/>
			</fileset>
		</copy>
	</target>
	
	<target name="copy.resources" depends="mkdirs">
		<copy todir="${product.classes}">
			<fileset dir="${product.src}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>
	</target>
					

	<target name="package" depends="product.compile, samples.compile, javadoc, copy.resources, copy.licenses">
		<copy todir="${ship}/mqlight-${version}" file="mqlight/pom.xml"/>
		<replace file="${ship}/mqlight-${version}/pom.xml" token="9.9.9999999999" value="${version}"/>
		<jar jarfile="${ship}/mqlight-${version}/mqlight-api-${version}.jar" basedir="${product.classes}">
			<manifest>
				<attribute name="Implementation-Version" value="${level}"/>
			</manifest>
		</jar>
		<jar jarfile="${ship}/mqlight-${version}/mqlight-api-${version}-javadoc.jar" basedir="${product.doc}">
			<manifest>
				<attribute name="Implementation-Version" value="${level}"/>
			</manifest>
		</jar>
		<jar jarfile="${ship}/mqlight-${version}/mqlight-samples-${version}.jar">
			<manifest>
				<attribute name="Implementation-Version" value="${level}"/>
			</manifest>
			<fileset dir="${samples.classes}"/>
			<fileset dir="${samples.src}"/>
			<fileset dir="${samples.doc}"/>
		</jar>
		<zip destfile="${ship}/mqlight-api-${version}-all.zip">
			<zipfileset dir="${ship}/mqlight-${version}" prefix="mqlight-${version}"/>
		</zip>
	</target>

	<!-- Compile the unit tests -->
	<target name="compile.ut" depends="package">
		<!-- Compile product unit tests -->
		<javac srcdir="${product.unittest.src}" destdir="${product.unittest.classes}" includeantruntime="false" debug="true">
			<classpath>
				<path refid="lib.jars"/>
				<fileset dir="${nonship}">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${ship}/mqlight-${version}/">
					<include name="mqlight-api-${version}.jar"/>
				</fileset>
			</classpath>
		</javac>
		<jar jarfile="${product.unittest}/mqlight-api-${version}-unittests.jar" basedir="${product.classes}"/>
		
		<!-- Compile samples unit tests -->
		<javac srcdir="${samples.unittest.src}" destdir="${samples.unittest.classes}" includeantruntime="false" debug="true">
			<classpath>
				<path refid="lib.jars"/>
				<fileset dir="${nonship}">
					<include name="**/*.jar"/>
				</fileset>
				<fileset dir="${ship}/mqlight-${version}/">
					<include name="mqlight-api-${version}.jar"/>
					<include name="mqlight-samples-${version}.jar"/>
				</fileset>
			</classpath>
		</javac>
		<jar jarfile="${samples.unittest}/mqlight-samples-${version}-unittests.jar" basedir="${samples.classes}"/>
	</target>

	<target name="check.ut">
		<available file="${product.unittest}/mqlight-api-${version}-unittests.jar" property="unittests.present"/>
	</target>

	<!-- Excute the unit tests -->
	<target name="execute.ut.tests" depends="setup, check.ut" if="unittests.present">
		<delete file="${product.unittest}/tests.failed"/>
		<delete file="${product.unittest}/coverage.failed"/>

		<!-- Run unit tests for product (with code coverage) -->
		<jacoco:coverage destfile="${results.unittest.coverage}/jacoco.exec" excludes="org.*:com.ibm.mqlight.api.samples.*">
			<junit failureproperty="junit.failed" fork="true" forkmode="once">
				<formatter type="plain" usefile="true"/>
				<formatter type="xml" usefile="true"/>
				<classpath>
					<path refid="lib.jars"/>
					<fileset dir="${nonship}">
						<include name="*.jar"/>
					</fileset>
					<fileset dir="${ship}/mqlight-${version}">
						<include name="mqlight-api-${version}.jar"/>
					</fileset>
					<pathelement path="${product.unittest.classes}"/>
				</classpath>
				<batchtest todir="${results.unittest.output}">
					<fileset dir="${product.unittest.src}">
						<include name="**/Test*.java"/>
					</fileset>
				</batchtest>
			</junit>
		</jacoco:coverage>

		<!-- Run unit tests for samples (without code coverage) -->
		<junit failureproperty="junit.failed">
			<formatter type="plain" usefile="true"/>
			<formatter type="xml" usefile="true"/>
			<classpath>
				<path refid="lib.jars"/>
				<fileset dir="${nonship}">
					<include name="*.jar"/>
				</fileset>
				<fileset dir="${ship}/mqlight-${version}">
					<include name="mqlight-api-${version}.jar"/>
					<include name="mqlight-samples-${version}.jar"/>
				</fileset>
				<pathelement path="${samples.unittest.classes}"/>
			</classpath>
			<batchtest todir="${results.unittest.output}">
				<fileset dir="${samples.unittest.src}">
					<include name="**/Test*.java"/>
				</fileset>
			</batchtest>
		</junit>

		<!-- Generate XML reports for the unittests -->
		<junitreport todir="${results}" tofile="junit.xml">
			<fileset dir="${results.unittest.output}">
				<include name="TEST-*.xml"/>
			</fileset>
		</junitreport>

		<!-- Concatenate together the text log files for the unit tests -->
		<concat destfile="${results}/javatest.log" append="true">
			<fileset dir="${results.unittest.output}" includes="TEST-*.txt"/>
		</concat>
		
		<!-- Generate unit test code coverage report -->
		<jacoco:report>
			<executiondata>
				<file file="${results.unittest.coverage}/jacoco.exec"/>
			</executiondata>

		    <structure name="MQ Light Non-blocking Java Client">
		        <classfiles>
		            <fileset dir="${product.classes}">
		        	    <exclude name="org/**/*"/>
		            </fileset>
		        </classfiles>
		        <sourcefiles encoding="UTF-8">
		            <fileset dir="${product.src}"/>
		        </sourcefiles>
		    </structure>
		                        
		    <html destdir="${results.unittest.coverage}"/>
			<html destfile="${results}/java-utcoverage.zip"/>
			<check failonviolation="false" violationsproperty="coverage.failed">
				<rule>
					<!-- Require at least 80% instruction coverage from the unit tests -->
					<limit counter="INSTRUCTION" value="COVEREDRATIO" minimum="0.8"/>
				</rule>
			</check>
		</jacoco:report>
	</target>

	<!-- Run findbugs -->
	<target name="findbugs" depends="package">
		<findbugs home="../../MakeSystem/tools/findbugs"
				  output="html"
				  outputFile="${results}/javafindbugs.html"
				  excludeFilter="findbugs.excludes.xml"
				  errorProperty="findbugs.failed"
				  warningsProperty="findbugs.failed">
			<auxClasspath>
				<fileset dir="${ship}/mqlight-${version}">
					<include name="mqlight-api-${version}.jar"/>
					<include name="mqlight-samples-${version}.jar"/>
				</fileset>
				<path refid="lib.jars"/>
			</auxClasspath>
			<sourcePath>
				<pathelement path="${product.src}"/>
				<pathelement path="${samples.src}"/>
			</sourcePath>
			<fileset dir="${product.classes}">
				<include name="com/ibm/mqlight/**/*.class"/>
			</fileset>
			<fileset dir="${samples.classes}">
				<include name="com/ibm/mqlight/**/*.class"/>
			</fileset>
		</findbugs>
	</target>

	<target name="ut.status" depends="execute.ut.tests" if="junit.failed">
		<touch file="${results}/tests.failed"/>
	</target>
	
	<target name="coverage.status" depends="execute.ut.tests" if="coverage.failed">
		<touch file="${results}/coverage.failed"/>
	</target>

	<target name="findbugs.status" depends="findbugs" if="findbugs.failed">
		<touch file="${results}/findbugs.failed"/>
	</target>

	<target name="run.ut" depends="ut.status, coverage.status, findbugs.status"/>
	
	<target name="unittest" depends="compile.ut, ut.status, coverage.status, findbugs.status">
		<fail if="junit.failed" message="Junit tests failed"/>
		<fail if="coverage.failed" message="Unit test cover coverage below required threashold"/>
		<fail if="findbugs.failed" message="Findbugs found bugs!"/>
	</target>

	<target name="mqlight" depends="package, compile.ut"/>

	<target name="all" depends="clean, unittest"/>
</project>
